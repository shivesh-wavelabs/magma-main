version: "3.7"

# Standard logging for each service
x-logging: &logging_anchor
  driver: "json-file"
  options:
    max-size: "10mb"
    max-file: "10"

# fluentbit logging for special services
x-logging: &fluentd_anchor
  driver: "fluentd"
  options:
    fluentd-address: "localhost:24224"
    fluentd-async-connect: "true"

# Standard volumes mounted
x-standard-volumes: &volumes_anchor
  - ${ROOTCA_PATH}:/var/opt/magma/certs/rootCA.pem
  - ${CERTS_VOLUME}:/var/opt/magma/certs
  - ${CONFIGS_OVERRIDE_VOLUME}:/var/opt/magma/configs
  - ${CONFIGS_DEFAULT_VOLUME}:/etc/magma
  - ${CONFIGS_TEMPLATES_PATH}:/etc/magma/templates
  - ${CONTROL_PROXY_PATH}:/etc/magma/control_proxy.yml
  - /etc/snowflake:/etc/snowflake

x-generic-service: &service
  volumes: *volumes_anchor
  logging: *logging_anchor
  restart: always
  network_mode: host

# Generic python anchor to avoid repetition for orc8r python services
x-orc8r-service: &pyservice
  <<: *service
  image: ${DOCKER_REGISTRY}gateway_python:${IMAGE_VERSION}

# Generic python anchor to avoid repetition for lte python services
x-lte-pyservice: &ltepyservice
  <<: *service
  image: ${DOCKER_REGISTRY}gateway_pipelined:${IMAGE_VERSION}

services:

  control_proxy:
    <<: *pyservice
    container_name: control_proxy
    command: >
      sh -c "/usr/local/bin/generate_nghttpx_config.py &&
             /usr/bin/env nghttpx --conf /var/opt/magma/tmp/nghttpx.conf /var/opt/magma/certs/controller.key /var/opt/magma/certs/controller.crt"

  magmad:
    <<: *pyservice
    container_name: magmad
    volumes:
      - ${ROOTCA_PATH}:/var/opt/magma/certs/rootCA.pem
      - ${CERTS_VOLUME}:/var/opt/magma/certs
      - ${CONFIGS_OVERRIDE_VOLUME}:/var/opt/magma/configs
      - ${CONFIGS_DEFAULT_VOLUME}:/etc/magma
      - ${CONFIGS_TEMPLATES_PATH}:/etc/magma/templates
      - ${CONTROL_PROXY_PATH}:/etc/magma/control_proxy.yml
      - /etc/snowflake:/etc/snowflake
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/var/opt/magma/docker
    environment:
      DOCKER_REGISTRY: ${DOCKER_REGISTRY}
      DOCKER_USERNAME: ${DOCKER_USERNAME}
      DOCKER_PASSWORD: ${DOCKER_PASSWORD}
    command: python3.8 -m magma.magmad.main

  pipelined:
    <<: *ltepyservice
    container_name: pipelined
    privileged: true
    volumes:
      - ${ROOTCA_PATH}:/var/opt/magma/certs/rootCA.pem
      - ${CERTS_VOLUME}:/var/opt/magma/certs
      - ${CONFIGS_OVERRIDE_VOLUME}:/var/opt/magma/configs
      - ${CONFIGS_DEFAULT_VOLUME}:/etc/magma
      - ${CONFIGS_TEMPLATES_PATH}:/etc/magma/templates
      - ${CONTROL_PROXY_PATH}:/etc/magma/control_proxy.yml
      - /etc/snowflake:/etc/snowflake
      - /var/run/openvswitch:/var/run/openvswitch
    command: >
      sh -c "set bridge cwag_br0 protocols=protocols=OpenFlow10,OpenFlow13,OpenFlow14 other-config:disable-in-band=true &&
        /usr/bin/ovs-vsctl set-controller cwag_br0 tcp:127.0.0.1:6633 &&
        /usr/bin/ovs-vsctl set-fail-mode cwag_br0 secure &&
        python3.8 -m magma.pipelined.main"

  radius:
    <<: *service
    image: ${DOCKER_REGISTRY}goradius:${IMAGE_VERSION}
    container_name: radius
    depends_on:
      - "logrouter"
    environment:
      - ODS_ACCESS_TOKEN=${ODS_ACCESS_TOKEN}
      - SCUBA_ACCESS_TOKEN=${SCUBA_ACCESS_TOKEN}
      - AAA_ENDPOINT=${AAA_ENDPOINT:-https://graph.expresswifi.com/radius/authorization}
      - AAA_ACCESS_TOKEN=${AAA_ACCESS_TOKEN}
      - RADIUS_SECRET=${RADIUS_SECRET:-123456}
      - TEMPLATE_ENV=radius.ofpanalytics.config.json.template
      - PARTNER_SHORTNAME=${PARTNER_SHORTNAME}
    command: >
      /bin/sh -c "./docker-entrypoint.sh"
    logging: *fluentd_anchor

  radiusd:
    <<: *service
    image: ${DOCKER_REGISTRY}gateway_go:${IMAGE_VERSION}
    container_name: radiusd
    extra_hosts:
      - radius:${HOST_DOCKER_INTERNAL}
    command: envdir /var/opt/magma/envdir /var/opt/magma/bin/radiusd -logtostderr=true -v=0

  logrouter:
    <<: *service
    image: ${DOCKER_REGISTRY}logrouter
    container_name: logrouter
    ports:
      - "24224:24224"
    healthcheck:
      test: ["CMD", "nc", "-vz", "localhost", "24224"]
      interval: 30s
      timeout: 10s
      retries: 15
    environment:
      - SCRIBE_ACCESS_TOKEN=${SCUBA_ACCESS_TOKEN}
      - SCUBA_TABLE=perfpipe_xwf_xwfm_logs
      - PARTNER_SHORTNAME=${PARTNER_SHORTNAME}

  cadvisor:
    image: gcr.io/google-containers/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    command:
      - --disable_metrics=tcp,udp,sched,percpu,diskIO
      - --docker_only
      - --skip_headers
      - --store_container_labels=false
