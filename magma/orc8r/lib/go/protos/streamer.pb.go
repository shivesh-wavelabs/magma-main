// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orc8r/protos/streamer.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StreamRequest struct {
	GatewayId string `protobuf:"bytes,1,opt,name=gatewayId,proto3" json:"gatewayId,omitempty"`
	// stream_name to attach to.
	// E.g., subscriberdb, config, etc.
	StreamName string `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	// extra_args contain any extra data to send up with the stream request.
	// This value will be different per stream provider.
	ExtraArgs            *any.Any `protobuf:"bytes,3,opt,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_acdce76608ae0d01, []int{0}
}

func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *StreamRequest) GetStreamName() string {
	if m != nil {
		return m.StreamName
	}
	return ""
}

func (m *StreamRequest) GetExtraArgs() *any.Any {
	if m != nil {
		return m.ExtraArgs
	}
	return nil
}

type DataUpdateBatch struct {
	// updates to config values
	Updates []*DataUpdate `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	// resync is true iff the updates would be a snapshot of all the contents
	// in the cloud.
	Resync               bool     `protobuf:"varint,2,opt,name=resync,proto3" json:"resync,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataUpdateBatch) Reset()         { *m = DataUpdateBatch{} }
func (m *DataUpdateBatch) String() string { return proto.CompactTextString(m) }
func (*DataUpdateBatch) ProtoMessage()    {}
func (*DataUpdateBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_acdce76608ae0d01, []int{1}
}

func (m *DataUpdateBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataUpdateBatch.Unmarshal(m, b)
}
func (m *DataUpdateBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataUpdateBatch.Marshal(b, m, deterministic)
}
func (m *DataUpdateBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataUpdateBatch.Merge(m, src)
}
func (m *DataUpdateBatch) XXX_Size() int {
	return xxx_messageInfo_DataUpdateBatch.Size(m)
}
func (m *DataUpdateBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_DataUpdateBatch.DiscardUnknown(m)
}

var xxx_messageInfo_DataUpdateBatch proto.InternalMessageInfo

func (m *DataUpdateBatch) GetUpdates() []*DataUpdate {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *DataUpdateBatch) GetResync() bool {
	if m != nil {
		return m.Resync
	}
	return false
}

type DataUpdate struct {
	// key is the unique key for each item
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value can be file contents, protobuf serialized message, etc.
	// For key deletions, the value field would be absent.
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataUpdate) Reset()         { *m = DataUpdate{} }
func (m *DataUpdate) String() string { return proto.CompactTextString(m) }
func (*DataUpdate) ProtoMessage()    {}
func (*DataUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_acdce76608ae0d01, []int{2}
}

func (m *DataUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataUpdate.Unmarshal(m, b)
}
func (m *DataUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataUpdate.Marshal(b, m, deterministic)
}
func (m *DataUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataUpdate.Merge(m, src)
}
func (m *DataUpdate) XXX_Size() int {
	return xxx_messageInfo_DataUpdate.Size(m)
}
func (m *DataUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_DataUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_DataUpdate proto.InternalMessageInfo

func (m *DataUpdate) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DataUpdate) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamRequest)(nil), "magma.orc8r.StreamRequest")
	proto.RegisterType((*DataUpdateBatch)(nil), "magma.orc8r.DataUpdateBatch")
	proto.RegisterType((*DataUpdate)(nil), "magma.orc8r.DataUpdate")
}

func init() { proto.RegisterFile("orc8r/protos/streamer.proto", fileDescriptor_acdce76608ae0d01) }

var fileDescriptor_acdce76608ae0d01 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4f, 0x02, 0x31,
	0x10, 0xc5, 0x5d, 0x89, 0x08, 0xb3, 0x1a, 0x4d, 0x43, 0x74, 0xf9, 0x93, 0x48, 0xf6, 0xc4, 0xa9,
	0xab, 0xe0, 0xc1, 0x2b, 0xc4, 0xc4, 0xe8, 0xc1, 0x43, 0x09, 0x1e, 0x8c, 0x09, 0x19, 0x60, 0xac,
	0x46, 0x76, 0x8b, 0x6d, 0x57, 0xdd, 0xb3, 0x5f, 0xdc, 0xd8, 0x2e, 0x41, 0x0e, 0x9e, 0xda, 0x37,
	0xfd, 0x35, 0xf3, 0xde, 0x0c, 0xb4, 0x95, 0x9e, 0x5f, 0xe9, 0x64, 0xa5, 0x95, 0x55, 0x26, 0x31,
	0x56, 0x13, 0xa6, 0xa4, 0xb9, 0xd3, 0x2c, 0x4c, 0x51, 0xa6, 0xc8, 0x1d, 0xd2, 0x6a, 0x4a, 0xa5,
	0xe4, 0x92, 0x3c, 0x3a, 0xcb, 0x9f, 0x13, 0xcc, 0x0a, 0xcf, 0xc5, 0xdf, 0x01, 0x1c, 0x8e, 0xdd,
	0x57, 0x41, 0xef, 0x39, 0x19, 0xcb, 0x3a, 0x50, 0x97, 0x68, 0xe9, 0x13, 0x8b, 0xdb, 0x45, 0x14,
	0x74, 0x83, 0x5e, 0x5d, 0x6c, 0x0a, 0xec, 0x0c, 0x42, 0xdf, 0x69, 0x9a, 0x61, 0x4a, 0xd1, 0xae,
	0x7b, 0x07, 0x5f, 0xba, 0xc7, 0x94, 0xd8, 0x00, 0x80, 0xbe, 0xac, 0xc6, 0x29, 0x6a, 0x69, 0xa2,
	0x4a, 0x37, 0xe8, 0x85, 0xfd, 0x06, 0xf7, 0x06, 0xf8, 0xda, 0x00, 0x1f, 0x66, 0x85, 0xa8, 0x3b,
	0x6e, 0xa8, 0xa5, 0x89, 0x9f, 0xe0, 0xe8, 0x1a, 0x2d, 0x4e, 0x56, 0x0b, 0xb4, 0x34, 0x42, 0x3b,
	0x7f, 0x61, 0x17, 0xb0, 0x9f, 0x3b, 0x69, 0xa2, 0xa0, 0x5b, 0xe9, 0x85, 0xfd, 0x53, 0xfe, 0x27,
	0x12, 0xdf, 0xe0, 0x62, 0xcd, 0xb1, 0x13, 0xa8, 0x6a, 0x32, 0x45, 0x36, 0x77, 0xb6, 0x6a, 0xa2,
	0x54, 0xf1, 0x25, 0xc0, 0x06, 0x67, 0xc7, 0x50, 0x79, 0xa3, 0xa2, 0x4c, 0xf6, 0x7b, 0x65, 0x0d,
	0xd8, 0xfb, 0xc0, 0x65, 0xee, 0xd3, 0x1c, 0x08, 0x2f, 0xfa, 0x0f, 0x50, 0x1b, 0x97, 0x33, 0x65,
	0x77, 0x00, 0x37, 0x64, 0x27, 0x65, 0x9f, 0xd6, 0x96, 0x93, 0xad, 0xe9, 0xb5, 0x3a, 0xff, 0xb8,
	0x74, 0xa1, 0xe2, 0x9d, 0xf3, 0x60, 0xd4, 0x7e, 0x6c, 0x3a, 0x24, 0xf1, 0xeb, 0x5b, 0xbe, 0xce,
	0x12, 0xa9, 0xca, 0x2d, 0xce, 0xaa, 0xee, 0x1c, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0x98, 0x86,
	0xe8, 0x16, 0xdc, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamerClient is the client API for Streamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamerClient interface {
	// GetUpdates streams config updates from the cloud.
	// The RPC call would be kept open to push new updates as they happen.
	GetUpdates(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Streamer_GetUpdatesClient, error)
}

type streamerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamerClient(cc grpc.ClientConnInterface) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) GetUpdates(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Streamer_GetUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Streamer_serviceDesc.Streams[0], "/magma.orc8r.Streamer/GetUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerGetUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streamer_GetUpdatesClient interface {
	Recv() (*DataUpdateBatch, error)
	grpc.ClientStream
}

type streamerGetUpdatesClient struct {
	grpc.ClientStream
}

func (x *streamerGetUpdatesClient) Recv() (*DataUpdateBatch, error) {
	m := new(DataUpdateBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerServer is the server API for Streamer service.
type StreamerServer interface {
	// GetUpdates streams config updates from the cloud.
	// The RPC call would be kept open to push new updates as they happen.
	GetUpdates(*StreamRequest, Streamer_GetUpdatesServer) error
}

// UnimplementedStreamerServer can be embedded to have forward compatible implementations.
type UnimplementedStreamerServer struct {
}

func (*UnimplementedStreamerServer) GetUpdates(req *StreamRequest, srv Streamer_GetUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUpdates not implemented")
}

func RegisterStreamerServer(s *grpc.Server, srv StreamerServer) {
	s.RegisterService(&_Streamer_serviceDesc, srv)
}

func _Streamer_GetUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamerServer).GetUpdates(m, &streamerGetUpdatesServer{stream})
}

type Streamer_GetUpdatesServer interface {
	Send(*DataUpdateBatch) error
	grpc.ServerStream
}

type streamerGetUpdatesServer struct {
	grpc.ServerStream
}

func (x *streamerGetUpdatesServer) Send(m *DataUpdateBatch) error {
	return x.ServerStream.SendMsg(m)
}

var _Streamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUpdates",
			Handler:       _Streamer_GetUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "orc8r/protos/streamer.proto",
}
