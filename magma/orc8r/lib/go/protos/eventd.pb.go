// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orc8r/protos/eventd.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// --------------------------------------------------------------------------
// An Event encapsulates all information regarding an event and it's metadata.
// --------------------------------------------------------------------------
type Event struct {
	// A user-specified string to categorize events
	StreamName string `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	// Denotes the way an event should be deserialized.
	// This should correspond to an event type in swagger_eventd.v1.yml
	EventType string `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// A user-specified non-unique identifier for events
	Tag string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	// The event log serialized as JSON
	Value                string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_846669bfe2c4d9e2, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetStreamName() string {
	if m != nil {
		return m.StreamName
	}
	return ""
}

func (m *Event) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *Event) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Event) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "magma.orc8r.Event")
}

func init() { proto.RegisterFile("orc8r/protos/eventd.proto", fileDescriptor_846669bfe2c4d9e2) }

var fileDescriptor_846669bfe2c4d9e2 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xb1, 0x4b, 0xc6, 0x30,
	0x14, 0xc4, 0xfd, 0xfc, 0xfc, 0xc4, 0xbe, 0x3a, 0x68, 0x70, 0x48, 0x2b, 0xa2, 0x74, 0x72, 0x4a,
	0xc0, 0x2e, 0xce, 0x8a, 0x9b, 0x38, 0xa8, 0x38, 0xb8, 0x94, 0xb4, 0x7d, 0x84, 0x42, 0xd3, 0x57,
	0xd2, 0x58, 0xe8, 0x7f, 0x2f, 0x7d, 0x71, 0xb0, 0x53, 0x72, 0xbf, 0x5c, 0xb8, 0x3b, 0xc8, 0xc8,
	0x37, 0x8f, 0x5e, 0x8f, 0x9e, 0x02, 0x4d, 0x1a, 0x67, 0x1c, 0x42, 0xab, 0x58, 0x89, 0xd4, 0x19,
	0xeb, 0x8c, 0x62, 0x43, 0xbe, 0xf5, 0x35, 0xe4, 0x1c, 0x0d, 0xd1, 0x57, 0x10, 0x1c, 0x5e, 0xd6,
	0x7f, 0xe2, 0x16, 0xd2, 0x29, 0x78, 0x34, 0xae, 0x1a, 0x8c, 0x43, 0xb9, 0xbb, 0xdb, 0xdd, 0x27,
	0xef, 0x10, 0xd1, 0x9b, 0x71, 0x28, 0x6e, 0x00, 0x38, 0xa1, 0x0a, 0xcb, 0x88, 0xf2, 0x98, 0xdf,
	0x13, 0x26, 0x9f, 0xcb, 0x88, 0xe2, 0x02, 0xf6, 0xc1, 0x58, 0xb9, 0x67, 0xbe, 0x5e, 0xc5, 0x15,
	0x1c, 0x66, 0xd3, 0xff, 0xa0, 0x3c, 0x61, 0x16, 0xc5, 0xc3, 0x33, 0x9c, 0x73, 0xe0, 0x07, 0xfa,
	0xb9, 0x6b, 0x50, 0x94, 0x70, 0xf6, 0x4a, 0x36, 0x76, 0x10, 0xea, 0x5f, 0x6b, 0xc5, 0x2c, 0xbf,
	0xdc, 0xb0, 0x2f, 0xea, 0xda, 0xe2, 0xe8, 0xe9, 0xfa, 0x3b, 0x63, 0xaa, 0xe3, 0xb0, 0xbe, 0xab,
	0xb5, 0xa5, 0xbf, 0x7d, 0xf5, 0x29, 0x9f, 0xe5, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x9a,
	0x20, 0x92, 0x1e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	// Logs an event to FluentBit.
	LogEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Void, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) LogEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.EventService/LogEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	// Logs an event to FluentBit.
	LogEvent(context.Context, *Event) (*Void, error)
}

// UnimplementedEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (*UnimplementedEventServiceServer) LogEvent(ctx context.Context, req *Event) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogEvent not implemented")
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_LogEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).LogEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.EventService/LogEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).LogEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogEvent",
			Handler:    _EventService_LogEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/eventd.proto",
}
